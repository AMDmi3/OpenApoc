language: cpp
os: linux
arch: amd64
dist: focal

cache: ccache

#compiler:
#  - gcc
#  - clang

jobs:
  include:
    - os: linux
      env:
        - MATRIX_ENV="PASS=build CXX='g++-10' CC='gcc-10' BUILD_TYPE=Quick"
    - os: linux
      env:
        - MATRIX_ENV="PASS=build CXX='clang++-10' CC='clang-10' BUILD_TYPE=sanitize"
    - os: linux
      env:
        - MATRIX_ENV="PASS=lint CLANG_FORMAT=clang-format-10 CLANG_TIDY=clang-tidy-10"

# Passes todo:
#  - osx
#  - linux sanitize
#  - linux static analysis (clang-tidy?)

before_install:
  - sudo apt-get install ninja-build -y
  - if [ "$PASS" = "lint" ]; then sudo apt-get install clang-tidy-10 clang-format-10; fi
  - if [ "$CXX" = "g++-10" ]; then sudo apt-get install g++-10; fi
  - if [ "$CXX" = "clang++-10" ]; then sudo apt-get install clang-10; fi
  - eval "${MATRIX_ENV}"
  - ./tools/travis-scripts/build_prepare_linux.sh
  - ${CXX} --version
  - ${CC} --version


before_script:
  - export CFLAGS="-Wall" CXXFLAGS="-Wall -Werror -Wno-error=sign-compare"
  - $(which time) cmake . -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCLANG_TIDY=${CLANG_TIDY} -DCLANG_FORMAT=${CLANG_FORMAT} -DENABLE_TESTS=ON -DCMAKE_C_FLAGS="${CFLAGS}" -DCMAKE_CXX_FLAGS="${CXXFLAGS}" -GNinja


script:
# Create the GameState as that triggers the generated source commands
  - if [ "$PASS" = "build" ]; then echo "Building revision $(git describe --tags --all --long --always)"; $(which time) ninja && `which time` ctest -V -j 2; fi
  - if [ "$PASS" = "lint" ]; then echo "clang-format linting range ${TRAVIS_COMMIT_RANGE}"; CLANG_FORMAT=${CLANG_FORMAT} ./tools/lint.sh ${TRAVIS_COMMIT_RANGE}; fi
  - if [ "$PASS" = "lint" ]; then ninja generated-source && echo "clang-tidy linting range ${TRAVIS_COMMIT_RANGE}"; CLANG_TIDY=clang-tidy BUILD_DIR=$(pwd) ./tools/lint-tidy.sh ${TRAVIS_COMMIT_RANGE} || true; fi
